<?php

class SBWModelFormatter {

  protected $model;


  public function SBWModelFormatter($model) {
    if ( !isset($model) ) {
      trigger_error("No model specified", E_USER_ERROR);
    }
    $this->model = $model;
  }


  public function formatModel() {
    $notes = $this->model->notes;

    $wikitext = <<<WIKI
{{Category physicochemical model}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->

== Model Contents ==


WIKI;

    $wikitext .= "=== Species ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Synonyms !! Version of !! Compartment !! Initial condition\n";
    foreach ($this->model->getSpeciesIds() as $id) {
      $species = $this->model->getSpecies($id);
      $uid = $species->uid;
      $wikitext .= "|-\n| [[has model species::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('synonym', 'is version of', 'is contained in', 'has initial condition'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";

    $wikitext .= "=== Reactions ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Mass action formula !! Parameters \n";
    foreach ($this->model->getReactionIds() as $id) {
      $reaction = $this->model->getReaction($id);
      $uid = $reaction->uid;
      $wikitext .= "|-\n| [[has model interaction::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('mass action formula', 'has kinetic parameter'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";
      
    $wikitext .= "=== Parameters ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Value !! Source\n";
    foreach ($this->model->getParameterIds() as $id) {
      $parameter = $this->model->getParameter($id);
      $uid = $parameter->uid;
      $wikitext .= "|-\n| [[has model parameter::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('parameter value', 'parameter value source'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";

    return $wikitext;
  }


  public function formatSpecies($id) {
    $species = $this->model->getSpecies($id);

    $model_uid     = $this->model->uid;
    $notes         = $species->notes;
    $name          = $species->getBestName();
    $ic_uid        = $species->initialConcentration->uid;
    $wikitext = <<<WIKI
{{Category physicochemical species}}
{{Property label|label=$name}}
{{PropertyPrefix has initial condition}}
{{Property has initial condition|initial_condition=$ic_uid}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This species is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  public function formatReaction($id) {
    $reaction = $this->model->getReaction($id);

    $model_uid   = $this->model->uid;
    $notes       = $reaction->notes;
    $name        = $reaction->getBestName();
    $mass_action = $reaction->asText();
    $reaction_wikitext =
      implode("\n", array_map(create_function('$p',
					      'return "{{Property has kinetic parameter|kinetic_parameter=$p->uid}}";'),
			      $reaction->getParameters()));

    $wikitext = <<<WIKI
{{Category physicochemical reaction}} 
{{Property label|label=$name}}
{{Property mass action formula|mass_action_formula=$mass_action}}
{{PropertyPrefix has kinetic parameter}}
$reaction_wikitext
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This parameter is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  public function formatParameter($id) {
    $parameter = $this->model->getParameter($id);

    $model_uid   = $this->model->uid;
    $notes       = $parameter->notes;
    $name        = $parameter->getBestName();
    $value       = $parameter->value;
    $wikitext = <<<WIKI
{{Category model parameter}}
{{Property label|label=$name}}
{{Property parameter value|parameter_value=$value}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This parameter is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  public function formatAll() {
    $wikitext = '';

    $uid = $this->model->uid;
    $wikitext .= "<div style='border: 1px dashed #000000; background: #f0f0f0; padding: .5em;'>\n";
    $wikitext .= "= $uid =\n";
    //$wikitext .= '<pre>';
    $wikitext .= $this->formatModel();
    //$wikitext .= '</pre>';
    $wikitext .= "</div>\n\n\n";
    
    foreach ( $this->model->getSpeciesIds() as $id ) {
      $uid = $this->model->getSpecies($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #f0fff0; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatSpecies($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    foreach ( $this->model->getReactionIds() as $id ) {
      $uid = $this->model->getReaction($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #f0f0ff; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatReaction($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    foreach ( $this->model->getParameterIds() as $id ) {
      $uid = $this->model->getParameter($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #fffff0; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatParameter($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    $wikitext .= "__NOTOC__\n";

    return $wikitext;
  }


  public function formatComponentRow($uid, $properties) {
    return implode(" || ", array_map(create_function('$p', "return \"{{#show: $uid | ?\$p}}\";"), $properties));
  }

}

?>
