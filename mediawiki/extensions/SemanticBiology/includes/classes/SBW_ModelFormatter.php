<?php

class SBWModelFormatter {

  protected $model;


  public function SBWModelFormatter($model) {
    if ( !isset($model) ) {
      trigger_error("No model specified", E_USER_ERROR);
    }
    $this->model = $model;
  }


  public function format($entity) {
    if     ($entity instanceof SBWSbmlModel)       return $this->formatModel();
    elseif ($entity instanceof SBWSbmlCompartment) return $this->formatCompartment($entity->id);
    elseif ($entity instanceof SBWSbmlSpecies)     return $this->formatSpecies($entity->id);
    elseif ($entity instanceof SBWSbmlReaction)    return $this->formatReaction($entity->id);
    elseif ($entity instanceof SBWSbmlParameter)   return $this->formatParameter($entity->id);
  }


  public function formatAll() {
    $wikitext = '';

    $uid = $this->model->uid;
    $wikitext .= "<div style='border: 1px dashed #000000; background: #f8f8f8; padding: .5em;'>\n";
    $wikitext .= "= $uid =\n";
    //$wikitext .= '<pre>';
    $wikitext .= $this->formatModel();
    //$wikitext .= '</pre>';
    $wikitext .= "</div>\n\n\n";
    
    foreach ( $this->model->getCompartmentIds() as $id ) {
      $uid = $this->model->getCompartment($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #fff0e0; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatCompartment($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    foreach ( $this->model->getSpeciesIds() as $id ) {
      $uid = $this->model->getSpecies($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #f0fff0; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatSpecies($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    foreach ( $this->model->getReactionIds() as $id ) {
      $uid = $this->model->getReaction($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #fffff0; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatReaction($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    foreach ( $this->model->getParameterIds() as $id ) {
      $uid = $this->model->getParameter($id)->uid;
      $wikitext .= "<div style='border: 1px dashed #000000; background: #fff0ff; padding: .5em;'>\n";
      $wikitext .= "= $uid =\n";
      //$wikitext .= '<pre>';
      $wikitext .= $this->formatParameter($id);
      //$wikitext .= '</pre>';
      $wikitext .= "</div>\n\n\n";
    }

    $wikitext .= "__NOTOC__\n";

    return $wikitext;
  }


  private function formatModel() {
    $notes = $this->model->notes;

    $wikitext = <<<WIKI
{{Category model}}
{{Property model language
|model_language=SBML
}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->

== Model Contents ==


WIKI;

    $wikitext .= "=== Compartments ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Version of !! Size\n";
    foreach ($this->model->getCompartmentIds() as $id) {
      $compartment = $this->model->getCompartment($id);
      $uid = $compartment->uid;
      $wikitext .= "|-\n| [[has compartment::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('is version of', 'parameterized by'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";

    $wikitext .= "=== Species ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Version of !! Compartment !! Initial condition\n";
    foreach ($this->model->getSpeciesIds() as $id) {
      $species = $this->model->getSpecies($id);
      $uid = $species->uid;
      $wikitext .= "|-\n| [[has species::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('is version of', 'located in compartment', 'parameterized by'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";

    $wikitext .= "=== Reactions ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Mass action formula !! Parameters \n";
    foreach ($this->model->getReactionIds() as $id) {
      $reaction = $this->model->getReaction($id);
      $uid = $reaction->uid;
      $wikitext .= "|-\n| [[has interaction::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('interaction definition', 'parameterized by'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";
      
    $wikitext .= "=== Parameters ===  \n";
    $wikitext .= "{| class=\"smwtable\"\n! Name !! Value !! Source\n";
    foreach ($this->model->getParameterIds() as $id) {
      $parameter = $this->model->getParameter($id);
      $uid = $parameter->uid;
      $wikitext .= "|-\n| [[has parameter::$uid]] || ";
      $wikitext .= $this->formatComponentRow($uid, array('parameter value', 'parameter value source'));
      $wikitext .= "\n";
    }
    $wikitext .= "|}\n\n";

    return $wikitext;
  }


  private function formatSpecies($id) {
    $species = $this->model->getSpecies($id);

    $model_uid     = $this->model->uid;
    $notes         = $species->notes;
    $id            = $species->id;
    $ic_uid        = $species->initialParameter->uid;
    $wikitext = <<<WIKI
{{Category species}}
{{Property model component ID|model_component_id=$id}}
{{PropertyPrefix parameterized by}}
{{Property parameterized by|parameterized_by=$ic_uid}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This species is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  private function formatReaction($id) {
    $reaction = $this->model->getReaction($id);

    $model_uid   = $this->model->uid;
    $notes       = $reaction->notes;
    $id          = $reaction->id;
    $mass_action = $reaction->asText();
    $reaction_wikitext =
      implode("\n", array_map(create_function('$p',
					      'return "{{Property parameterized by|parameterized_by=$p->uid}}";'),
			      $reaction->getParameters()));

    $wikitext = <<<WIKI
{{Category interaction}} 
{{Property model component ID|model_component_id=$id}}
{{Property interaction definition|interaction_definition=$mass_action}}
{{PropertyPrefix parameterized by}}
$reaction_wikitext
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This interaction is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  private function formatParameter($id) {
    $parameter = $this->model->getParameter($id);

    $model_uid   = $this->model->uid;
    $notes       = $parameter->notes;
    $id          = $parameter->id;
    $value       = $parameter->value;
    $wikitext = <<<WIKI
{{Category parameter}}
{{Property model component ID|model_component_id=$id}}
{{Property parameter value|parameter_value=$value}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This parameter is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  private function formatCompartment($id) {
    $compartment = $this->model->getCompartment($id);

    $model_uid   = $this->model->uid;
    $notes       = $compartment->notes;
    $id          = $compartment->id;
    $sp_uid      = $compartment->sizeParameter->uid;
    $wikitext = <<<WIKI
{{Category compartment}}
{{Property model component ID|model_component_id=$id}}
{{PropertyPrefix parameterized by}}
{{Property parameterized by|parameterized_by=$sp_uid}}
{{Categoryhelper table end}}
$notes


<!-- the following text was auto-generated by the model importer -->
This compartment is part of the model '[[$model_uid]]'.
WIKI;

    return $wikitext;
  }


  private function formatComponentRow($uid, $properties) {
    return implode(" || ", array_map(create_function('$p', "return \"{{#show: $uid | ?\$p}}\";"), $properties));
  }

}

?>
